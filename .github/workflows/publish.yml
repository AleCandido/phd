name: Publish Documents

on:
  push:
    branches:
      - main
  schedule:
    # autorun every two months (day 1)
    - cron: "0 0 1 1/2 *"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: ${{ matrix.dir }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        dir:
          - thesis
          - activity-report

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        uses: xu-cheng/latex-action@v2
        with:
          root_file: ${{ matrix.dir }}/main.tex
          work_in_root_file_dir: true
      - name: Set possible outdir
        id: set-latex-outdir
        working-directory: ${{ matrix.dir }}
        run: |
          outdir=$(sed "s@\$out_dir *= *'\(\w*\)';@\1@p" -n .latexmkrc 2>/dev/null || true)
          echo "outdir=${outdir}" >> $GITHUB_OUTPUT
      - name: Upload PDF file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dir }}
          path: ${{ matrix.dir }}/${{ steps.set-latex-outdir.outputs.outdir }}/main.pdf

  pages:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: pages

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: pnpm build
      - name: Upload website pages
        uses: actions/upload-artifact@v3
        with:
          name: pages
          path: pages/build/

  collect:
    runs-on: ubuntu-latest

    if: ${{ always() }}
    needs: [build, pages]

    steps:
      - name: Download built documents
        uses: actions/download-artifact@v3
      - name: Extract
        run: |
          artifacts=$(echo */ | tr ' ' '\n' | xargs -I _ basename _)
          for art in $artifacts; do
            if [ $art != "pages" ]; then
              mv $art/main.pdf ${art}.pdf
            else
              mv $art/* .
            fi
            rm -r $art
          done
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./

  deploy:
    runs-on: ubuntu-latest
    needs: collect
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
